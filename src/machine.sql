-- Events 

create type event_type as enum ('invocation_done', 'invocation_error');



create table event_type_info (
  id event_type primary key,
  name text unique not null,
  description text
);

create table event (
  id int generated by default as identity primary key,
  "type" event_type not null,
  created_at timestamptz default now() not null
);

-- Services

create type machine_type as enum ();

create type external_service_type as enum ();

create table external_service_type_info (
  id external_service_type primary key,
  name text unique not null,
  description text
);

create table machine_type_info (
  id machine_type primary key,
  name text unique not null,
  description text
);

-- Actions

create type action_type as enum();

create table action_type_info (
  id action_type primary key,
  name text unique not null,
  description text
);

create table action (
  id int generated by default as identity primary key,
  "type" action_type not null
);

-- Transitions

create table transition (
  id int generated by default as identity primary key,
  target int not null,
  internal bool default false,
  meta jsonb
);

create table transition_action (
  transition int references transition,
  action int references action,
  primary key (transition, action)
);

-- Guards

create type condition_type as enum('invocation_done', 'invocation_error');

create table condition_info (
  id condition_type primary key,
  eval regproc not null,
  has_params bool not null
);

create table guard (
  id int generated by default as identity primary key,
  transition int references transition not null,
  "type" condition_type not null
);

-- States

create type state_node_type as enum ('atomic', 'compound', 'final');

create table state_node (
  id int generated by default as identity primary key,
  "type" state_node_type not null,
  name text,
  initial int references state_node initially deferred,
  parent int references state_node initially deferred,
  path ltree not null,
  machine int not null,
  tags text[],
  meta jsonb constraint meta_is_object check (jsonb_typeof(meta) = 'object'),
  constraint compound_states_have_initial_state check ("type" <> 'compound' or initial is not null)
);

create table state_ondone (
  state int references state_node,
  transition int references transition,
  "order" int not null,
  primary key (state, transition)
);

alter table transition add foreign key (target) references state_node;

create table onentry_action (
  state int references state_node,
  action int references action,
  "order" int not null,
  primary key (state, action)
);

create table onexit_action (
  state int references state_node,
  action int references action,
  "order" int not null,
  primary key (state, action)
);

create table event_mapping (
  state int references state_node,
  event_type event_type,
  transition int references transition,
  "order" int not null,
  primary key (state, event_type, transition)
);

create table eventless (
  state int references state_node,
  transition int references transition,
  "order" int not null,
  primary key (state, transition)
);


-- TODO check if there's a better approach
-- schedule a cron job for each individual transition instead?
create table after (
  state int references state_node,
  duration interval not null,
  transition int references transition,
  primary key (state, duration, transition)
);

create table machine (
  id int generated by default as identity primary key,
  "type" machine_type not null,
  name text unique not null,
  state int references state_node not null,
  unique (id, "type")
);

alter table state_node
  add foreign key (machine) references machine initially deferred;


create type service_type as enum('machine', 'external');

create table invocation (
  id int generated by default as identity primary key,
  "type" service_type not null,
  state int references state_node not null,
  external_service external_service_type,
  machine int references machine,
  constraint machine_invocation check ("type" <> 'machine' or machine is null),
  constraint external_service_invocation check ("type" <> 'external' or external_service is not null)
);

create table invocation_ondone (
  invocation int references invocation,
  transition int references transition unique,
  "order" int not null,
  primary key (invocation, transition)
);

create table invocation_onerror (
  invocation int references invocation,
  transition int references transition unique,
  "order" int not null,
  primary key (invocation, transition)
);

